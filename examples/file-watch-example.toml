# File Watch Streaming Example
# This demonstrates monitoring a file for changes and processing updates in real-time
#
# Usage:
#   # Terminal 1: Start the pipeline
#   conveyor run -c examples/file-watch-example.toml
#
#   # Terminal 2: Append data to the watched file
#   echo '{"level": "error", "message": "Something went wrong"}' >> /tmp/watch-test.jsonl
#   echo '{"level": "info", "message": "All good"}' >> /tmp/watch-test.jsonl

[pipeline]
name = "file_watch_example"
version = "1.0.0"
description = "Monitor a file for changes and process in real-time"

[global]
log_level = "info"
execution_mode = "batch"
timeout_seconds = 60  # Run for 60 seconds

[[stages]]
id = "watch_file"
type = "source.file_watch"
inputs = []

[stages.config]
path = "/tmp/watch-test.jsonl"
format = "jsonl"
poll_interval = 1  # Check every 1 second

[[stages]]
id = "filter_errors"
type = "transform.filter"
inputs = ["watch_file"]

[stages.config]
column = "level"
operator = "=="
value = "error"

[[stages]]
id = "count_errors"
type = "transform.aggregate_stream"
inputs = ["filter_errors"]

[stages.config]
operation = "count"

[[stages]]
id = "output"
type = "sink.stdout_stream"
inputs = ["count_errors"]

[stages.config]
format = "json"
pretty = true
flush_every = 1
